{"version":3,"sources":["logo.svg","button/index.js","header/index.js","content/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","src_button_0","_ref","href","children","alt","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","src_header","src","logo","target","src_content","Gallery","React","lazy","e","then","bind","App","Suspense","fallback","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0PCGzBC,SAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,SAAUC,EAAnBH,EAAmBG,IAAQC,EAA3BC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,kCACbO,EAAAC,EAAAC,cAAA,IAAAJ,OAAAK,OAAA,CAAGT,KAAMA,EAAMU,UAAWR,EAAM,oBAAsB,UAAcC,GACjEF,qBCAUU,SAAA,kBACbL,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbJ,EAAAC,EAAAC,cAAA,OAAKI,IAAKC,IAAMH,UAAU,cAAcR,IAAI,SAC5CI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACV,EAAD,CACEgB,OAAO,SACPd,KAAK,gFACLE,KAAG,GAEHI,EAAAC,EAAAC,cAAA,KAAGE,UAAU,2BAKfJ,EAAAC,EAAAC,cAACV,EAAD,CAAQE,KAAK,kCAAb,mBCjBOe,SAAA,kBACbT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,WADd,qBAIAF,EAAAC,EAAAC,cAAA,gcASAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAd,8BCdAM,SAAUC,IAAMC,KAAK,kBAAMtB,EAAAuB,EAAA,GAAAC,KAAAxB,EAAAyB,KAAA,aAclBC,MAZf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,SAAP,CAAgBC,SAAUlB,EAAAC,EAAAC,cAAA,yBACxBF,EAAAC,EAAAC,cAACQ,EAAD,SCDYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.a57b9513.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f0fd1f4c.svg\";","import React from \"react\";\nimport \"./index.scss\";\n\nexport default ({ href, children, alt, ...props }) => (\n  <a href={href} className={alt ? \"button button-alt\" : \"button\"} {...props}>\n    {children}\n  </a>\n);\n","import React from \"react\";\nimport Button from \"../button\";\nimport logo from \"../logo.svg\";\nimport \"./index.scss\";\n\nexport default () => (\n  <header className=\"header\">\n    <div className=\"wrapper header-inner\">\n      <img src={logo} className=\"header-logo\" alt=\"logo\" />\n      <div className=\"cta-container\">\n        <Button\n          target=\"_blank\"\n          href=\"https://www.google.com/maps/place/200+Green+Hollow+Dr+SW,+Pataskala,+OH+43062\"\n          alt\n        >\n          <i className=\"fas fa-map-marker-alt\" />\n        </Button>\n        {/* <Button target=\"_blank\" href=\"#\" alt>\n          <i className=\"fab fa-facebook-f\" />\n        </Button> */}\n        <Button href=\"mailto: shariyinger@icloud.com\">Contact Us</Button>\n      </div>\n    </div>\n  </header>\n);\n","import React from \"react\";\nimport \"./index.scss\";\n\nexport default () => (\n  <div className=\"content\">\n    <div className=\"content-wrapper\">\n      <h1>\n        Long - Term <br />\n        Pet Care Facility\n      </h1>\n      <p>\n        We provide extended to permanent residential care to animals whose\n        owners cannot currently care for them. This includes, but is not limited\n        to; transitional living circumstances such as: a move to assisted\n        living, medical rehabilitation stays, active military deployment or\n        death in the family. Our guests enjoy the comfort of a home, rolling\n        acres to run, play and explore, and the opportunity to lay on the grass\n        and soak up the sun.\n      </p>\n      <h2 className=\"underline\">Full Site Coming Soon.</h2>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport Header from \"./header\";\nimport Content from \"./content\";\nimport \"./App.scss\";\n\nconst Gallery = React.lazy(() => import(\"./gallery\"));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Content />\n      <React.Suspense fallback={<div>loading..</div>}>\n        <Gallery />\n      </React.Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}